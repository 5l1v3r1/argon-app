"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var web_view_1 = require("ui/web-view");
var Argon = require("@argonjs/argon");
var observable_array_1 = require("data/observable-array");
var properties_1 = require("ui/core/properties");
exports.urlProperty = new properties_1.Property({
    name: 'url',
    defaultValue: ''
});
exports.urlProperty.set = function (v) { throw new Error('Use the src property to load another page'); };
exports.titleProperty = new properties_1.Property({
    name: 'title',
    defaultValue: ''
});
exports.titleProperty.set = undefined;
exports.progressProperty = new properties_1.Property({
    name: 'progress',
    defaultValue: 0
});
exports.progressProperty.set = undefined;
exports.sessionProperty = new properties_1.Property({
    name: 'session',
    defaultValue: undefined,
});
exports.sessionProperty.set = undefined;
exports.isArgonPageProperty = new properties_1.Property({
    name: 'isArgonPage',
    defaultValue: false,
});
exports.isArgonPageProperty.set = undefined;
var ArgonWebView = /** @class */ (function (_super) {
    __extends(ArgonWebView, _super);
    function ArgonWebView() {
        var _this = _super.call(this) || this;
        _this.log = new observable_array_1.ObservableArray();
        return _this;
    }
    ArgonWebView.prototype._didCommitNavigation = function () {
        if (this.session)
            this.session.close();
        this.log.length = 0;
        exports.sessionProperty.nativeValueChange(this, undefined);
        this._outputPort = undefined;
    };
    ArgonWebView.prototype._handleArgonMessage = function (message) {
        var _this = this;
        if (this.session && !this.session.isConnected)
            return;
        var sessionUrl = this.url;
        if (!this.session && sessionUrl) {
            console.log('Connecting to argon.js session at ' + sessionUrl);
            var manager = Argon.ArgonSystem.instance;
            var messageChannel = manager.session.createSynchronousMessageChannel();
            var session = manager.session.addManagedSessionPort(sessionUrl);
            var port = messageChannel.port2;
            port.onmessage = function (msg) {
                if (!_this.session)
                    return;
                var injectedMessage = "typeof __ARGON_PORT__ !== 'undefined' && __ARGON_PORT__.postMessage(" + msg.data + ")";
                _this.evaluateJavascriptWithoutPromise(injectedMessage);
            };
            exports.sessionProperty.nativeValueChange(this, session);
            this._outputPort = port;
            session.open(messageChannel.port1, manager.session.configuration);
        }
        // console.log(message);
        this._outputPort && this._outputPort.postMessage(JSON.parse(message));
    };
    ArgonWebView.prototype._handleWebXRMessage = function (message) {
    };
    ArgonWebView.prototype._handleLogMessage = function (message) {
        var log = JSON.parse(message);
        log.lines = log.message.split(/\r\n|\r|\n/);
        // console.log(this.url + ' (' + log.type + '): ' + log.lines.join('\n\t > ')); 
        this.log.push(log);
    };
    ArgonWebView.prototype.on = function (event, callback, thisArg) {
        return _super.prototype.on.call(this, event, callback, thisArg);
    };
    return ArgonWebView;
}(web_view_1.WebView));
exports.ArgonWebView = ArgonWebView;
exports.urlProperty.register(ArgonWebView);
exports.titleProperty.register(ArgonWebView);
exports.progressProperty.register(ArgonWebView);
exports.sessionProperty.register(ArgonWebView);
exports.isArgonPageProperty.register(ArgonWebView);
//# sourceMappingURL=data:application/json;base64,